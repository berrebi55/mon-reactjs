name: Deploy to EC2

on:
  push:
    branches:
      - main  # La pipeline ne se déclenche que pour les pushs sur la branche "main"

jobs:
  deploy:
    runs-on: ubuntu-latest  # Utiliser un environnement Ubuntu pour l'exécution du job

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Vérification du code source

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa  # La clé privée est stockée dans les secrets GitHub
        chmod 600 ~/.ssh/id_rsa  # Réglage des permissions pour la clé privée

        # Ajouter l'IP publique de l'instance EC2 dans known_hosts pour éviter un message de confirmation
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client  # Installation du client SSH pour la connexion

    - name: SSH into EC2 and pull latest changes
      run: |
        ssh -v -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          cd $WORK_DIR && git pull origin $MAIN_BRANCH  # Se déplacer dans le répertoire et exécuter un git pull
        EOF
      env:
        SSH_USER: ${{ secrets.SSH_USER }}  # Utilisateur SSH (créé sur l'instance EC2)
        SSH_HOST: ${{ secrets.SSH_HOST }}  # IP publique de l'instance EC2
        WORK_DIR: ${{ secrets.WORK_DIR }}  # Chemin du projet sur l'instance EC2
        MAIN_BRANCH: ${{ secrets.MAIN_BRANCH }}  # Branche principale (main)

    - name: Clean up SSH
      run: |
        rm -rf ~/.ssh  # Suppression du répertoire .ssh après l'utilisation pour des raisons de sécurité
